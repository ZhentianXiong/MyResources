getInstance（） 用static来实现单例模式
javap -v test.class 查看字节码文件
成块注释代码：ctrl+shift+/
行注释：ctrl+/


单元测试：测试一个函数，一个模块或一个类  安装JUnit插件 快捷键：command+shift+T (哪个方法或类需要单元测试就放在哪里)
设置断点：点击左边行数设置红断点，再把鼠标移至右侧代码debug即可看出运行情况（各个参数的值），再次点击红点取消断点
单步跟踪
查看内存
分析调用栈：通俗地说，栈存变量名和引用这些，堆存实际的变量值和对象值，然后栈中的地址可以指向堆中的对象


git: 分布式版本控制系统  GitHub：git存储仓库    没有中央服务器，离线也可以工作，每个人的电脑都是一个完整的版本库，一般也会有一台"中央服务器"来方便交换大家的修改
其他（集中式）版本控制系统：CVS、SVN    所有版本库都集中存放在中央服务器，必须联网工作
git使用：
先新建仓库，描述，public，输入编程语言，选择Apache License 2.0开源协议
clone工程到本地，首先复制ssh地址，然后终端调整好目录，
输入 git clone https://github.com/ZhentianXiong/WorkNotes.git  克隆到指定目录下
然后在文件夹中添加文件
git add .                        //文件添加到仓库（.代表提交所有文件，也可指定某个文件名）
git commit -m "First Commit"     //把文件提交到仓库， -m 指的是说明， ""里面是描述性说明
git push                        //上传到github
git init                        //cd到指定目录，然后初始化为git仓库
只可跟踪txt文件、网页、代码的改动，word、图片视频的改动无法跟踪
git status                      //查看仓库当前状态
git diff 文件名                  //查看文件的改动
git log                         //查看提交历史
git reset --hard HEAD^/HEAD~100 //回退到上一个或前100个版本



homebrew:
安装任意包：brew install wget
卸载任意包：brew uninstall git
查询可用包：brew search 包名
查看已安装包列表：brew list
查看任意包信息：brew info 包名


synchronized：（并发）
多个线程运行时都有自己的栈空间，如果多线程之间没有共享的数据则多线程并没有协同完成一件事情，则没有优势。
但是考虑到多线程共享数据的安全性问题，引入关键字synchronized，让每个线程依次排队操作共享变量（互斥性）
同一时刻只有一个线程能够获得对象的监视器（monitor）
eg: synchronized(test.class){...}


volatile:不稳定的，易变的
使用volatile修饰的变量会强制将修改的值立即写入主存，而使缓存中的值失效
适用于写操作不依赖于当前值，且读多写少
相比于synchronized，其不会让线程阻塞，且响应速度更高

String对象不可修改，可修改的字符串,且不会产生新的未使用对象：StringBuffer（线程更安全） StringBuilder（线程不安全，不能同步访问，但是速度较快）
StringBuffer用法：new对象，charAt(),replace(),toString(),length()

arraylist: 长度是可变的，但是只能存储对象，不能存储基本数据类型如int。 .get() .set() .add() .remove() .size() .sort()

stack栈，后进先出  .push()  .pop()  .empty() .search() .peek(查看栈顶元素而不弹出)
queue队列，先进先出   offer(),poll()加入或移出元素，且可以判断成功与否   add()remove()在失败时会抛出异常   element()peek()可以只查看不移出该元素

static:（表示为类所有，不为对象所有）
某个域加上static，则该类中只有一个这样的域；不加static，则每个对象都可以独立拥有该（实例）域的一份拷贝
静态常量使用较多：Math.PI 变量使用较少
静态方法是一种不能向对象实施操作的方法，但是可以用对象进行调用  Math.pow(x,a);
main方法不对任何对象进行操作，静态的main方法将执行并创建程序所需的对象

大数问题：可以考虑用字符串或数组来表示大数字







数据结构：T00、T03-T09

数组、字符串：分别用连续内存存储数字和字符
链表、树：注意代码鲁棒性
栈：递归（递归本质就是一种栈结构）
队列：广度优先遍历算法

数组：
空间效率不好：因为要预先设置大小分配内存（静态数据结构），所以多有空闲
时间效率很高：因为内存连续，可以根据下标在O（1）时间读写任何元素（可用于实现哈希表：下标-值（key-value））

链表：
用指针（引用）把若干个节点连接成链状结构
动态数据结构：在创建时，不用知道链表的长度(内存不连续)，所以其空间效率比数组高
时间效率不高：内存不连续，找任何节点只能从头节点开始沿着链一直往下找，O（N）
双向链表：除了有指向下一节点的指针，还有指向上一节点的指针
复杂链表：除了有指向下一节点的指针，还有指向任意节点的指针

树：
除根结点之外每个节点只有一个父节点，除叶节点之外所有节点都有一个或多个子节点，父节点与子节点之间用指针（引用）链接
二叉树：每个节点最多只能有两个子节点
树的遍历：按某一顺序访问树中的所有节点    可用 递归（更简洁） 和 循环 实现（三种遍历，六种方法很重要）
前中后序：即父节点分别在前、中、后的位置
前序：根左右     中序：左根右    后序：左右根
宽度优先遍历：从上到下，同一层从左到右依次访问每个节点

二叉树的特例：
二叉搜索树：左子节点总是小于或等于根结点，右子节点总是大于或等于根结点(中序)。平均可以以 O（logn）时间在二叉搜索树中找到一个节点
堆：最大堆（根节点的值最大），最小堆（根结点的值最小）   可用来解决快速查找最大值或最小值的问题
红黑树：红黑两种节点，通过规则确保从根结点到叶节点的最长路径的长度不超过最短路径的两倍

栈：后进先出，是一个不考虑排序的数据结构，通常需要 O（N）时间才能找到栈中的最大最小值
操作系统会给每个线程创建一个栈来存储函数调用时各个函数的参数、返回值及临时变量
Stack<Integer> stack1 = new Stack<Integer>();
注意队列或栈长度在不断动态变化，不能直接把.size（）或.length（）直接放在for/while语句条件里面，要先用一个int取出长度参数

队列：先进先出  只能用链表来初始化
Queue<Integer> queue1 = new LinkedList<Integer>();








算法:T10-T15

数学归纳法：先举几个简单例子找出规律
很多算法通过 递归 和 循环（性能更好，设置起始条件和终止条件来做重复运算） 来实现
递归（better）：代码简洁，性能不好，在函数内部调用自身做重复运算（但是函数调用有时间和空间的消耗，每一次调用都要在内存栈分配空间来保存参数、返回地址、临时变量，
              且可能会调用栈溢出）    把一个问题分解成两个或多个小问题，可能会存在重复运算，影响性能

重点：二分查找：适用于已经排好序的数组，每次与中间值进行比较
重点：归并排序：与快速排序互补。
（先排小的）      将数组分成两个子数组分别排序，并将有序的子数组 归并 以将整个数组排序。递归调用发生在处理整个数组之前；等分为两半；
重点：快速排序：（又快又存储小又简单）是(一般)最快的通用排序算法 O（NlgN） ，是原地排序（只需要一个很小的辅助栈）
（先排大的）      分治。将一个数组分成两个数组，两部分独立的排序，两个字数组都有序时整个数组就有序了。递归调用发生在处理整个数组之后；以切分点partition为分割；
哈希表查找是效率最高的查找方式，可以在 O（1）时间内查找某一元素；缺点是需要额外的存储空间；
二叉排序树查找

回溯法：非常适合由多个步骤组成的问题，且每一个步骤都有多个选项。
若在二维数组上搜索路径（迷宫或棋盘），可使用回溯法，回溯法可用递归实现，不能用递归则用栈

动态规划：（递归）求某一个问题的最优解（最大小值），且该问题可以划分为多个重叠的子问题，整个问题的最优解依赖于各个子问题的最优解
        自上而下的递归思路，用自下而上的循环代码来实现，先解出子问题的最优解并用数组保存，随后使用，整合起来得到整个问题的最优解
        1.求一个问题的最优解   2。整体的最优解依赖于各个子问题的最优解   3。子问题之间有重叠    4。从上往下递归，从下往上实现

贪婪算法：在分解子问题时存在某个特殊的选择，采用这个特殊选择一定能得到最优解。并证明最终能得到最优解

位运算：把数字表示成二进制之后对0(false)，1(true)的操作。
与& 或| 异或^(相同为0，不同为1)
左移（m<<n）把 m 左移 n 位，最左边的 n 位将会被丢弃，同时最右边补上 n 个0
右移（m>>n）同上；若是无符号数字，则用0填补左边；若有符号，则用数字的符号填补左边 n 位，即正数（0）都补0，负数（1）都补1
右移一位等同于除法除以2，除法的效率远远低于位运算，应尽可能用移位运算代替乘除法

//比较各算法的优劣，尤其是插入排序、冒泡排序、归并排序、快速排序
//额外空间消耗、平均时间复杂度、最差时间复杂度
排序算法；平均时间复杂度；最好；最差；其他；
选择排序selection； 1/2n^2;       ; ;
插入排序insertion； 1/4n^2;      n; ;
冒泡排序bubble；    1/2n^2;      n; ;
希尔排序shell；     unknown;      ; ;
归并排序merge；     nlgn;  1/2nlgn; ;
快速排序quick；     2nln n;  nlg n; 1/2n^2;
堆排序heap；       2nlg n;       ;  ;









高质量的代码（具有一般性，同时处理好特殊性）T16-

规范性：布局清晰，命名合理
完整性：考虑边界情况，做好错误处理
鲁棒性：采取防御性编程，处理无效输入（对输入参数的检查，处理错误，处理异常）

命名风格：
不用下划线或美元符开始和结束
用英文单词，不用拼音
类名：驼峰形式：                            UpperCameClass UserDO(DO例外)
方法名、参数名、成员变量、局部变量：驼峰形式     lowerCameCase   getHttpMessage()
常量：全部大写，单词用下划线隔开               MAX_STOCK_COUNT
抽象类以Abstract开头，异常类以Exception结尾，测试类以Test结尾，枚举类以Enum结尾
数组：必须是 String[] args 的形式
包名统一小写，且都使用单数形式    com.alibaba.util
接口类中的方法和属性不要加任何修饰符号，public也不要
大括号：  内容为空，直接 {}
不为空：  内容 不换行{ 换行 内容  换行 } else { repeat } 换行
小括号与字符之间不要有空格  if (a == b)
if/for/while/switch/do 等保留字与括号中间都必须加空格  后面即使只有一行代码也要加大括号
二目运算符、三目运算符左右两边都需要加一个空格   = && || ！ + - * /
采用 4 个空格，不要使用tab键
注释的双斜线与注释内容之间 有且仅有一个空格
参数传入时，多个参数逗号后面必须加空格
不同业务逻辑之间或不同语义之间可以插入一个空行
类的静态方法和静态变量直接用类名调用，不要用对象节约解析成本
所有相同类型的包装类对象之间的值比较，全部用equals方法
单元测试要全自动执行，且不能使用System.out进行人肉验证，必须用assert进行验证

完整性：
写代码之前，把所有可能的输入想清楚，考虑到所有的单元测试用例
从例子中抽象出一般的情况，考虑好循环结束的边界条件和递归终止的边界值
当输入不符合要求时要能做出合理的错误处理
考虑到需求可能会变化，考虑程序的可扩展性和可维护性    模块化，函数化
3种处理错误的方法： 1、用函数的返回值来告知调用者是否出错（return 0）  2、设置一个全局变量来处理错误的情况，此时可以传递错误的计算结果    3、不同的错误抛出不同的异常try...catch...throws